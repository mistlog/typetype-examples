/**
 * basic type
 */
type a = never
type b = number
type c = string

type value = 1
type bool = true
type tuple = [1,2,3]
type array = string[][]

type str = "abc"
type template = `value is: ${value}`

type obj = { a: 1, b: "abc", c: [1,2]}
type valueDeep = obj["c"][1]

type keys = keyof { readonly a?: 1, b: 2 }

/**
 * union type
 */
type u1 = union [0, 1, 2]
type u2 = | [0, 1, 2]

/**
 * function type
 */
type f1 = type () => void
type f2 = type (a:number, b:string) => number
type f3 = type () => type (a:number, b:string) => void

/**
 * conditional type
 */
type conditional = ^{
    if(1 extends string) {
        return "string"
    } else {
        return "number"
    }
}

type conditional2 = ^{
    if(1 extends string) {
        return "string"
    } else {
        return ^{
            if(1 extends 1) {
                return "is 1"
            } else {
                return "not 1"
            }
        }
    }
}

/**
 * generic
 */
export type function Foo = (T) => ^{
    if(T extends {a: infer U, b: infer U}) {
        return U
    } else {
        return never
    }
}

/**
 * mapped type
 */
type Keys = union ["Name", "Age"]

type mapped1 = ^{
    for(K in Keys) {
        return {
            key: K,
            value: boolean
        }
    }
}

type mapped2 = ^{
    for(K in Keys) {
        return {
            key: `get${K}`,
            value: type () => string
        }
    }
}